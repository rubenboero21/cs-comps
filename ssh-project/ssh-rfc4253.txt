SSH RFC 4253 Notes:

Runs on top of TCP/IP

Negotiated items:
	* Key exchange method
	* public key algorithm
	* symmetric encryption algorithm
	* message authentication algorithm
	* hash algorithm

Connection setup:
	"SSH works over any 8-bit clean, binary-transparent transport.  The
   underlying transport SHOULD protect against transmission errors, as
   such errors cause the SSH connection to terminate."
		- What does this mean?

	Client initiates the connection

	Once connection established, both sides must send identification string:
		SSH-protoversion-softwareversion SP comments CR LF
	See section 4.2 for specifics

	Once connection is established key exchange begins. All subsequent packets following the identification packet SHALL use binary packet protocol (section 6)


Maximum Packet Length (6.1)
	"All implementations MUST be able to process packets with an
   uncompressed payload length of 32768 bytes or less and a total packet
   size of 35000 bytes or less (including 'packet_length',
   'padding_length', 'payload', 'random padding', and 'mac')"

	"Implementations SHOULD support longer packets, where they might be needed."

	"implementations SHOULD check that the packet length is reasonable in
   order for the implementation to avoid denial of service and/or buffer
   overflow attacks"

Compression (6.2)
	States that "if compression has been negotiated". WHERE/HOW does compression get negotiated
		Occurs during the Algorithm Negotiation step (7.1)

		"The compression context is initialized after each key exchange, and
   	is passed from one packet to the next, with only a partial flush
	being performed at the end of each packet."

Encryption (6.3)
	"An encryption algorithm and a key will be negotiated during the key
   exchange."
	
	See section for all listed encryption algorithms (including no encryption)


Data Integrity (6.4)
	"The message authentication algorithm and key are negotiated during
   key exchange.  Initially, no MAC will be in effect, and its length
   MUST be zero.  After key exchange, the 'mac' for the selected MAC
   algorithm will be computed before encryption from the concatenation
   of packet data:
	mac = MAC(key, sequence_number || unencrypted_packet)"

Algorithm Negotiation (7.1):
	Client gets priority in preference:
		* check if client 1st choice matches server 1st, if not check if 2nd 	client matches any in server list, and so on
			- basically, highest client choice that server also has
		* if no matches, connection fails, both sides MUST disconnect

Key exchange 
	Keys exchanged for DH/encryption

Service request
	After key exchange, client requests a service:
		ssh-userauth
		ssh-connection






