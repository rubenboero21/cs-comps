10/11/2024
	Our client program is currently able to complete the SSH protocol exchange and the key exchange init steps of the SSH setup. In order to implement these two steps of the exchange, we needed to write networking code that is capable of initiating a TCP connection, forming a packet in accordance with the SSH spec/binary packet protocol, and sending the packet to the server. (This required us to read the RFC, and other sources, in order to understand what the SSH steps were doing and also the form the packets needed to take.) 
	We are currently working on the Diffie Hellman key exchange. This will require us to write code that computes the DH key, parse the server’s responses, encrypt messages, and decrypt messages using the encryption algorithm decided upon in the previous key exchange step. To achieve this, we are researching C libraries that we can leverage to handle the bulk of the encryption, decryption, and DH computations. We hope that the code we wrote that constructs packets in binary packet protocol form will also work for constructing DH packets (we don’t see a reason it wouldn’t, but maybe we missed something). We plan to begin implementing the DH exchange this weekend.

10/13/2024
	We struggled to find a library that does all the work of computing the DH parameters. A lot of time was spent trying to get various openssl libraries to work, but eventually we decided to manually compute the parameters of the DH exchange with the help of a big number library. This means that we will need to look for an encryption/decryption library because we really don't want to have to do that manually. We were able to send a malformed packet to the server.  